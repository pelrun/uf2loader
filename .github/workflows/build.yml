name: pico-bootloader-ci

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Nightly at 2 AM UTC
  workflow_dispatch:

concurrency:
  group: ${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  CMAKE_BUILD_TYPE: RelWithDebInfo

jobs:
  # ---------- 1. Static analysis & build ----------
  build:
    name: Build & Static Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        board: [pico, pico_w, pico2_w]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Set up Arm GCC
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      with:
        release: '13.2.Rel1'
        
    - name: Set up CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.28.x'
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip ninja-build libusb-1.0-0-dev pkg-config
        # Build picotool from source (remove if exists)
        rm -rf picotool
        git clone https://github.com/raspberrypi/picotool.git
        cd picotool
        mkdir build
        cd build
        cmake ..
        make
        sudo make install
        cd ../..
        
    - name: Run clang-tidy
      uses: HorstBaerbel/action-clang-tidy@master
      if: matrix.board == 'pico'  # Run only once
      with:
        scandir: './bootloader'
        builddir: './build'
        excludedirs: './pico-sdk'
        
    - name: Configure
      run: |
        cmake -B build -G Ninja \
          -DPICO_BOARD=${{ matrix.board }} \
          -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
          -DPICO_SDK_PATH=${PWD}/pico-sdk
          
    - name: Build bootloader
      run: |
        cmake --build build -j$(nproc)
        
    - name: Create UF2
      run: |
        cd build/bootloader
        # Generate UF2 if not already created
        if [ ! -f picocalc_sd_boot.uf2 ]; then
          picotool uf2 convert picocalc_sd_boot.elf picocalc_sd_boot.uf2
        fi
        
    - name: Validate UF2
      run: |
        cd build/bootloader
        picotool info picocalc_sd_boot.uf2 --all
        python3 ../../tools/check_uf2_crc32.py picocalc_sd_boot.uf2 --verbose
        
    - name: Check binary size
      run: |
        cd build/bootloader
        SIZE=$(stat -c%s picocalc_sd_boot.bin)
        echo "Binary size: $SIZE bytes"
        # Fail if bootloader is too large (>48KB for safety)
        if [ $SIZE -gt 49152 ]; then
          echo "ERROR: Bootloader too large! ($SIZE > 49152)"
          exit 1
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bootloader-${{ matrix.board }}
        path: |
          build/bootloader/picocalc_sd_boot.*
          build/bootloader/*.map
        retention-days: 7

  # ---------- 2. Deterministic simulation ----------
  sim:
    name: Renode Simulation Tests
    needs: build
    runs-on: ubuntu-latest
    container: antmicro/renode:latest
    strategy:
      matrix:
        board: [pico, pico_w]  # pico2_w not yet supported in Renode
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: bootloader-${{ matrix.board }}
        path: build/bootloader
        
    - name: Run Renode tests
      uses: antmicro/renode-test-action@v4.0.0
      with:
        tests-to-run: tests/bootloader.robot
        renode-version: '1.14.0'
        artifacts-path: test-artifacts
        gather-execution-metrics: true
      env:
        BOOTLOADER_BOARD: ${{ matrix.board }}
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: renode-test-results-${{ matrix.board }}
        path: |
          test-artifacts/
          robot_output.xml
          log.html
          report.html
          
  # ---------- 3. Unit tests in simulation ----------
  unit-tests:
    name: Unit Tests
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build gcc-arm-none-eabi
        
    - name: Build and run unit tests
      run: |
        cmake -B build_tests -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DPICO_SDK_PATH=${PWD}/pico-sdk \
          -DBUILD_TESTS=ON
        cmake --build build_tests
        ctest --test-dir build_tests --output-on-failure
        
  # ---------- 4. PlatformIO tests (optional) ----------
  pio-test:
    name: PlatformIO Tests
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    needs: [build, sim]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install PlatformIO
      run: |
        pip install platformio
        pio pkg install -g --tool "renode"
        
    - name: Run PlatformIO tests
      run: |
        pio test -e renode_sim --without-uploading
        
  # ---------- 5. Hardware tests (manual trigger) ----------
  hardware-test:
    name: Hardware Tests
    if: github.event_name == 'workflow_dispatch'
    needs: [sim, unit-tests]
    runs-on: [self-hosted, rp2040]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: bootloader-pico
        path: build/bootloader
        
    - name: Set up Python environment
      run: |
        python3 -m venv venv
        . venv/bin/activate
        pip install pytest pytest-embedded pytest-embedded-serial-port picotool pyserial
        
    - name: Run hardware tests
      run: |
        . venv/bin/activate
        cd tests
        pytest test_hardware.py -v --embedded-services serial --port /dev/ttyACM0
        
  # ---------- 6. Security scan ----------
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run CodeQL analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: 'cpp'
        
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/c
        
  # ---------- 7. Release ----------
  release:
    name: Create Release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build, sim, unit-tests, security]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create release bundle
      run: |
        mkdir -p release
        for board in pico pico_w pico2_w; do
          if [ -d "bootloader-${board}" ]; then
            cp bootloader-${board}/picocalc_sd_boot.uf2 release/picocalc_sd_boot_${board}.uf2
            cp bootloader-${board}/picocalc_sd_boot.elf release/picocalc_sd_boot_${board}.elf
          fi
        done
        cd release
        sha256sum *.uf2 > SHA256SUMS.txt
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-bundle
        path: release/
        retention-days: 90 